import { usingMistral as home } from '/home/localhost/main/telegram/hub/usingAI/mistral/index';
import * as readline from 'readline';
import { execSync } from 'child_process';
import * as fs from 'fs';
import os from 'os';
import path from 'path';
import { usingAI } from './core/ai';
const ai = home as any ? home : usingAI
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONTEXT_FILE = path.join(os.homedir(), '.terminal_assistant_context.json');
const MAX_HISTORY = 20; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
const SAFE_COMMANDS = ['ls', 'cd', 'cat', 'ps', 'pm2', 'git', 'npm', 'bun', 'echo', 'mkdir', 'touch'];
const DANGEROUS_PATTERNS = [
  'rm -rf', 'sudo', 'dd', 'mv', 'chmod', '>', '|', '&', ';', '`',
  '$', '(', ')', '{', '}', '[', ']', '~', '..', 'pkill', 'kill'
];

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface MistralResponse {
  message: string;
  command: string;
}

interface Context {
  history: Array<{ role: string; content: string }>;
  workingDirectory: string;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
let context: Context = {
  history: [],
  workingDirectory: process.cwd()
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function loadContext(): void {
  try {
    if (fs.existsSync(CONTEXT_FILE)) {
      const data = fs.readFileSync(CONTEXT_FILE, 'utf-8');
      context = JSON.parse(data);
      console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ ${CONTEXT_FILE}`);
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function saveContext(): void {
  try {
    fs.writeFileSync(CONTEXT_FILE, JSON.stringify(context, null, 2));
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç:', error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function updateWorkingDirectory(): void {
  try {
    context.workingDirectory = process.cwd();
    console.log(`üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${context.workingDirectory}`);
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:', error);
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
function addToHistory(role: string, content: string): void {
  context.history.push({ role, content });

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
  if (context.history.length > MAX_HISTORY) {
    context.history = context.history.slice(context.history.length - MAX_HISTORY);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
function getSystemPrompt(userInput: string): string {
  return `–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ Linux. –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${context.workingDirectory}
–°–∏—Å—Ç–µ–º–∞: ${os.platform()} ${os.arch()}
–î–∞—Ç–∞: ${new Date().toLocaleString()}
  
–ü—Ä–∞–≤–∏–ª–∞:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: { "message": "—Ç–µ–∫—Å—Ç", "command": "–∫–æ–º–∞–Ω–¥–∞" }
2. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω—É–∂–Ω–∞ - –æ—Å—Ç–∞–≤—å "command": ""
3. –ò–∑–±–µ–≥–∞–π –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (rm, sudo, >, | –∏ —Ç.–¥.)
4. –£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞:
${context.history.slice(-5).map(m => `${m.role}: ${m.content}`).join('\n')}

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userInput}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async function processWithMistral(input: string): Promise<MistralResponse> {
  addToHistory('user', input);

  try {
    const response = (await ai(
      `–ó–∞–ø—Ä–æ—Å: ${input}`,
      getSystemPrompt(input)
    )).choices[0].message.content;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const jsonStart = response.indexOf('{');
    const jsonEnd = response.lastIndexOf('}') + 1;

    if (jsonStart === -1 || jsonEnd === 0) {
      throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
    }

    const jsonString = response.substring(jsonStart, jsonEnd);
    const result = JSON.parse(jsonString) as MistralResponse;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory('assistant', result.message);

    return result;
  } catch (error) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const errorMessage = `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : error}`;
    addToHistory('assistant', errorMessage);
    return {
      message: errorMessage,
      command: ""
    };
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
async function executeCommandSafely(command: string): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const isDangerous = DANGEROUS_PATTERNS.some(p => command.includes(p)) &&
      !SAFE_COMMANDS.some(s => command.startsWith(s));

    if (isDangerous) {
      throw new Error(`–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω—è—é: ${command}`);
    execSync(command, {
      stdio: 'inherit',
      cwd: context.workingDirectory,
      encoding: 'utf-8'
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    updateWorkingDirectory();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error instanceof Error ? error.message : error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
function handleSpecialCommands(input: string): boolean {
  const trimmed = input.trim().toLowerCase();

  if (trimmed === 'context') {
    console.log('üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:');
    console.log(context.history.map((m, i) => `${i + 1}. ${m.role}: ${m.content}`).join('\n'));
    return true;
  }

  if (trimmed === 'clear-context') {
    context.history = [];
    console.log('üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω');
    return true;
  }

  if (trimmed === 'pwd') {
    console.log(`üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${context.workingDirectory}`);
    return true;
  }

  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  loadContext();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
  if (process.stdin.isTTY) {
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    console.log('–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–¥–ª—è –≤—ã—Ö–æ–¥–∞: exit, –∏—Å—Ç–æ—Ä–∏—è: context)');
    updateWorkingDirectory();

    rl.on('line', async (input) => {
      const trimmedInput = input.trim();

      try {
        if (trimmedInput === 'exit') {
          rl.close();
          return;
        }

        if (trimmedInput === 'prompt') {
          console.log('prompt');
          return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if (handleSpecialCommands(trimmedInput)) {
          return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Mistral
        const response = await processWithMistral(trimmedInput);

        // –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (response.message) {
          console.log(`üí¨ ${response.message}`);
        }

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if (response.command) {
          await executeCommandSafely(response.command);
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
      } finally {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        saveContext();
      }
    });

    rl.on('close', () => {
      console.log('üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      saveContext();
      process.exit(0);
    });
  } else {
    // –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    let inputData = '';
    process.stdin.setEncoding('utf-8');
    process.stdin.on('data', chunk => inputData += chunk);

    process.stdin.on('end', async () => {
      try {
        const response = await processWithMistral(inputData.trim());

        if (response.message) {
          console.log(`üí¨ ${response.message}`);
        }

        if (response.command) {
          await executeCommandSafely(response.command);
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
      } finally {
        saveContext();
        process.exit(0);
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
main().catch(error => {
  console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});